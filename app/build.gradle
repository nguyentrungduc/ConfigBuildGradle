apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "androidx.navigation.safeargs"

apply from: '../createdimen.gradle'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.ntduc.buildgradleconfig"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        resConfigs "en", "fr", "mdpi"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile file("myreleasekey.keystore")
            storePassword "password"
            keyAlias "MyReleaseKey"
            keyPassword "password"
        }
    }

    buildTypes {
        release {
            // Disables PNG crunching for the release build type.
            crunchPngs false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            debuggable true

            testCoverageEnabled true
        }
    }

    flavorDimensions "api", "mode", "server"
    productFlavors {
        demo {
            // Assigns this product flavor to the "mode" flavor dimension.
            dimension "mode"
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
        }

        full {
            dimension "mode"
            applicationIdSuffix ".full"
            versionNameSuffix "-full"
        }

        dev {
            applicationIdSuffix '.dev'
            versionNameSuffix '.dev'
            dimension 'server'
        }
        staging {
            applicationIdSuffix '.staging'
            versionNameSuffix '.staging'
            dimension 'server'
        }
        product {
            dimension 'server'
        }

        // Configurations in the "api" product flavors override those in "mode"
        // flavors and the defaultConfig block. Gradle determines the priority
        // between flavor dimensions based on the order in which they appear next
        // to the flavorDimensions property above--the first dimension has a higher
        // priority than the second, and so on.
        minApi24 {
            dimension "api"
            minSdkVersion 24
            // To ensure the target device receives the version of the app with
            // the highest compatible API level, assign version codes in increasing
            // value with API level. To learn more about assigning version codes to
            // support app updates and uploading to Google Play, read Multiple APK Support
            versionCode 30000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi24"
        }
        minApi23 {
            dimension "api"
            minSdkVersion 23
            versionCode 20000  + android.defaultConfig.versionCode
            versionNameSuffix "-minApi23"
        }

        minApi21 {
            dimension "api"
            minSdkVersion 21
            versionCode 10000  + android.defaultConfig.versionCode
            versionNameSuffix "-minApi21"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("minApi21") && names.contains("demo") && names.contains("product")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v13'
    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Support
    implementation "com.android.support:appcompat-v7:$rootProject.ext.lib_versions.support"
    implementation "com.android.support:cardview-v7:$rootProject.ext.lib_versions.support"
    implementation "com.android.support:recyclerview-v7:$rootProject.ext.lib_versions.support"
    implementation "com.android.support:support-v4:$rootProject.ext.lib_versions.support"
    implementation "com.android.support:customtabs:$rootProject.ext.lib_versions.support"
    implementation "com.android.support:design:$rootProject.ext.lib_versions.support"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.ext.lib_versions.constraint"

    // Google Architecture Component
    implementation "android.arch.lifecycle:extensions:$rootProject.ext.lib_versions.arch"
    kapt "android.arch.lifecycle:compiler:$rootProject.ext.lib_versions.arch"

    // Navigation Component
    implementation "android.arch.navigation:navigation-fragment-ktx:$rootProject.ext.lib_versions.nav"
    implementation "android.arch.navigation:navigation-ui-ktx:$rootProject.ext.lib_versions.nav"

    // Room
    implementation "android.arch.persistence.room:runtime:$rootProject.ext.lib_versions.room"
    kapt "android.arch.persistence.room:compiler:$rootProject.ext.lib_versions.room"

    // DI
    implementation "com.google.dagger:dagger:$rootProject.ext.lib_versions.dagger"
    implementation "com.google.dagger:dagger-android:$rootProject.ext.lib_versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$rootProject.ext.lib_versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.ext.lib_versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.ext.lib_versions.dagger"

    // API
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.lib_versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.lib_versions.okhttp"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.lib_versions.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.lib_versions.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.ext.lib_versions.retrofit"
    implementation "com.squareup.moshi:moshi-adapters:$rootProject.ext.lib_versions.moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$rootProject.ext.lib_versions.moshi"
    implementation "com.facebook.stetho:stetho:$rootProject.ext.lib_versions.estetho"
    implementation "com.facebook.stetho:stetho-okhttp3:$rootProject.ext.lib_versions.estetho"

    //Rx
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.lib_versions.rxjava"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.lib_versions.rxandroid"
    implementation "io.reactivex.rxjava2:rxkotlin:$rootProject.ext.lib_versions.rxkotlin"

    // test
    testImplementation "junit:junit:$rootProject.ext.lib_versions.junit"
    testImplementation("com.squareup.assertj:assertj-android:$rootProject.ext.lib_versions.assertj") {
        exclude module: 'support-annotations'
    }
    testImplementation "org.mockito:mockito-core:$rootProject.ext.lib_versions.mockito"
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.ext.lib_versions.mockito_kotlin"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$rootProject.ext.kotlin_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.ext.lib_versions.mockwebserver"
    testImplementation "commons-io:commons-io:$rootProject.ext.lib_versions.commons"
    // robolectric
    testImplementation "org.robolectric:robolectric:$rootProject.ext.lib_versions.robolectric"
    testImplementation "org.robolectric:shadows-multidex:$rootProject.ext.lib_versions.robolectric"

    // androidTest
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.lib_versions.support_test"
    androidTestImplementation "com.android.support.test:rules:$rootProject.ext.lib_versions.support_test"
    // Espresso dependencies
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$rootProject.ext.lib_versions.espresso") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-intents:$rootProject.ext.lib_versions.espresso") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$rootProject.ext.lib_versions.espresso") {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'design'
    }
    androidTestUtil "com.android.support.test:orchestrator:$rootProject.ext.lib_versions.orchestrator"

    implementation "com.github.bumptech.glide:glide:$rootProject.ext.lib_versions.glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.ext.lib_versions.glide"
    kapt "com.github.bumptech.glide:compiler:$rootProject.ext.lib_versions.glide"
}
